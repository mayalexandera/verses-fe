{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\nimport * as actions from \"../actions/index\";\nconst initialState = {\n  orders: [],\n  error: null,\n  loading: false\n};\n\nconst startOrder = (state, action) => {\n  console.log(state, action.payload);\n  return updateObject(state, {\n    loading: false\n  });\n};\n\nconst orderSuccess = (state, action) => {\n  console.log(state, action.payload.length);\n\n  if (action.payload.length < 1 || action.payload == state.orders) {\n    return state;\n  } else {\n    const updated = [];\n    state.orders.map(order => {\n      updated.push({ ...order\n      });\n    });\n    action.payload.map(order => {\n      updated.push({\n        order\n      });\n    });\n    console.log(action.payload, updated);\n    return updateObject(state, {\n      orders: [...updated],\n      error: null,\n      loading: false\n    });\n  }\n};\n\nconst fetchOrderSuccess = (state, action) => {\n  if (action.payload.length < 1 || action.payload == state.orders) {\n    return state;\n  } else if (action.payload.length == 1) {\n    return updateObject(state, {\n      orders: action.payload,\n      oading: false,\n      error: null\n    });\n  } else {\n    console.log(action.payload);\n    return updateObject(state, {\n      orders: [...action.payload],\n      loading: false,\n      error: null\n    });\n  }\n};\n\nconst orderFailed = (state, action) => {\n  console.log(state, action.payload);\n  return updateObject(state, {\n    error: true,\n    loading: false\n  });\n};\n\nconst deleteOrder = (state, action) => {\n  console.log(state, action.payload);\n  const updated = [];\n  state.orders.map(order => {\n    if (order.id !== action.payload) {\n      updated.push({ ...order\n      });\n    }\n\n    console.log(action.payload, updated);\n  });\n  return updateObject(state, {\n    orders: [...updated]\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.START_ORDER:\n      return startOrder(state, action);\n\n    case actionTypes.DELETE_ORDER:\n      return deleteOrder(state, action);\n\n    case actionTypes.ORDER_FAILED:\n      return orderFailed(state, action);\n\n    case actionTypes.ORDER_SUCCESS:\n      return orderSuccess(state, action);\n\n    case actionTypes.FETCH_ORDER_SUCCESS:\n      return fetchOrderSuccess(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/reducers/ordersReducer.js"],"names":["actionTypes","updateObject","actions","initialState","orders","error","loading","startOrder","state","action","console","log","payload","orderSuccess","length","updated","map","order","push","fetchOrderSuccess","oading","orderFailed","deleteOrder","id","reducer","type","START_ORDER","DELETE_ORDER","ORDER_FAILED","ORDER_SUCCESS","FETCH_ORDER_SUCCESS"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\nimport * as actions from \"../actions/index\";\n\nconst initialState = {\n  orders: [],\n  error: null,\n  loading: false\n}\n\nconst startOrder = (state, action) => {\n  console.log(state, action.payload)\n  return updateObject(state, {\n    loading: false\n  })\n}\n\nconst orderSuccess = (state, action) => {\n  console.log(state, action.payload.length)\n  if(action.payload.length < 1 || action.payload == state.orders) {\n   return state\n  } else {\n    const updated = [];\n    state.orders.map(order => {\n      updated.push({...order})\n    })\n    action.payload.map(order => {\n      updated.push({order})\n    })\n    console.log(action.payload, updated)\n    return updateObject(state, {\n      orders: [...updated],\n      error: null,\n      loading: false\n    })\n  }\n\n}\n\nconst fetchOrderSuccess = (state, action) => {\n  if (action.payload.length < 1 || action.payload == state.orders) {\n    return state;\n  }\n    else if( action.payload.length == 1 ) {\n      return updateObject(state, \n        {orders: action.payload, \n          oading: false,\n          error:null}\n      )\n    } else {\n  console.log(action.payload)\n  return updateObject(state,  {\n    orders: [...action.payload],\n    loading: false,\n    error: null\n  })\n}\n}\n\nconst orderFailed = (state, action) => {\n  console.log(state, action.payload)\n  return updateObject(state, {\n    error: true, loading: false\n  })\n}\n\nconst deleteOrder = (state, action) => {\n  console.log(state, action.payload) \n  const updated = []\n  state.orders.map(order => {\n    if(order.id !== action.payload) {\n      updated.push({...order})\n    }\n    console.log(action.payload, updated)\n  })\n  return updateObject(state,  {\n    orders: [...updated], \n  })\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.START_ORDER:\n      return startOrder(state, action);\n    case actionTypes.DELETE_ORDER:\n      return deleteOrder(state, action);\n    case actionTypes.ORDER_FAILED:\n      return orderFailed(state, action);\n    case actionTypes.ORDER_SUCCESS:\n      return orderSuccess(state, action);\n    case actionTypes.FETCH_ORDER_SUCCESS:\n      return fetchOrderSuccess(state, action);\n    default:\n      return state;\n  }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}