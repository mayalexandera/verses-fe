{"ast":null,"code":"var _jsxFileName = \"/Users/mayablevins/Desktop/verses/verses_fe/src/components/auth/Auth.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport * as actions from \"../../store/actions/index\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Name\"\n          },\n          value: \"\"\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: false\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = e => {\n      e.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.controls.name.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }));\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 22\n        }\n      }, this.props.error.message);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 22\n        }\n      });\n      ;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"brands-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, \"Sign In\"), authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form\",\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, form, /*#__PURE__*/React.createElement(Button, {\n      id: \"add-to-favorites-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n      id: \"add-to-cart-button\",\n      clicked: this.switchAuthModeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, \"SWITCH TO \", this.state.isSignup ? \"SIGN IN\" : \"SIGN UP\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, name, isSignup) => dispatch(actions.auth(email, password, name, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/components/auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","actions","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","name","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","e","preventDefault","props","onAuth","switchAuthModeHandler","prevState","componentDidMount","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","loading","auth","token","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport * as actions from \"../../store/actions/index\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Name\",\n        },\n        value: \"\",\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignup: false,\n  };\n\n  componentDidMount() {\n    if (this.props.authRedirectPath !== \"/\" ) {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        valid: this.checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      },\n    };\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.controls.name.value,\n      this.state.isSignup\n    );\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState((prevState) => {\n      return { isSignup: !prevState.isSignup };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n\n    let form = formElementsArray.map((formElement) => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n;\n    }\n\n    return (\n      <div className='form title'>\n        <p className='brands-title'>Sign In</p>\n        {authRedirect}\n        {errorMessage}\n        <form className='form' onSubmit={this.submitHandler}>\n          {form}\n            <Button id='add-to-favorites-button'>SUBMIT</Button>\n        </form>\n        <Button id=\"add-to-cart-button\" clicked={this.switchAuthModeHandler}>\n            SWITCH TO {this.state.isSignup ? \"SIGN IN\" : \"SIGN UP\"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, name, isSignup) =>\n      dispatch(actions.auth(email, password, name, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}