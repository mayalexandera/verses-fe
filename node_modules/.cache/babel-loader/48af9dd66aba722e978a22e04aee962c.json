{"ast":null,"code":"import api from \"../apis/api\";\nimport * as actionTypes from \"./actionTypes\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = response => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    user: user.user,\n    plan: user.plan,\n    plan_membership: user.plan_membership\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"userId\");\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const auth = (email, password, name, isSignup) => async dispatch => {\n  dispatch(authStart());\n  const authData = {\n    email: email,\n    password: password,\n    name: name,\n    returnSecureToken: true\n  };\n  let path = !isSignup ? `/session` : `/users/`;\n  await api.post(path, authData).then(response => {\n    dispatch(authSuccess(response.data));\n    localStorage.setItem(\"token\", response.data.user.session_token);\n    localStorage.setItem(\"userId\", response.data.user.id);\n  });\n};\nexport const fetchUser = () => async (dispatch, getState) => {\n  let user = getState().auth.userId;\n  dispatch(authStart());\n  JSON.stringify(user);\n  await api.get(`/users/${user}`).then(response => {\n    dispatch(fetchUserSuccess(response.data));\n  }).catch(err => {\n    dispatch(fetchUserFail(err));\n  });\n};\nexport const fetchUserFail = error => {\n  return {\n    type: actionTypes.FETCH_USER_FAIL,\n    error: error\n  };\n};\nexport const fetchUserSuccess = user => {\n  console.log(user);\n  return {\n    type: actionTypes.FETCH_USER_SUCCESS,\n    user: user.user,\n    plan: user.plan,\n    plan_membership: user.plan_membership\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/actions/AuthActions.js"],"names":["api","actionTypes","authStart","type","AUTH_START","authSuccess","response","AUTH_SUCCESS","user","plan","plan_membership","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","auth","email","password","name","isSignup","dispatch","authData","returnSecureToken","path","post","then","data","setItem","session_token","id","fetchUser","getState","userId","JSON","stringify","get","fetchUserSuccess","catch","err","fetchUserFail","FETCH_USER_FAIL","console","log","FETCH_USER_SUCCESS","setAuthRedirectPath","SET_AUTH_REDIRECT_PATH"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEF,WAAW,CAACG;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLH,IAAAA,IAAI,EAAEF,WAAW,CAACM,YADb;AAELC,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAFN;AAGLC,IAAAA,IAAI,EAAED,IAAI,CAACC,IAHN;AAILC,IAAAA,eAAe,EAAEF,IAAI,CAACE;AAJjB,GAAP;AAMD,CAPM;AASP,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAEjC,SAAO;AACLT,IAAAA,IAAI,EAAEF,WAAW,CAACY,SADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CANM;AAQP,OAAO,MAAME,MAAM,GAAG,MAAM;AAC1BC,EAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,QAAxB;AACA,SAAO;AACLb,IAAAA,IAAI,EAAEF,WAAW,CAACgB;AADb,GAAP;AAGD,CANM;AAQP,OAAO,MAAMC,IAAI,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,QAAxB,KACjB,MAAOC,QAAP,IAAoB;AACnBA,EAAAA,QAAQ,CAACrB,SAAS,EAAV,CAAR;AACA,QAAMsB,QAAQ,GAAG;AACfL,IAAAA,KAAK,EAAEA,KADQ;AAEfC,IAAAA,QAAQ,EAAEA,QAFK;AAGfC,IAAAA,IAAI,EAAEA,IAHS;AAIfI,IAAAA,iBAAiB,EAAE;AAJJ,GAAjB;AAMA,MAAIC,IAAI,GAAG,CAACJ,QAAD,GAAa,UAAb,GAA0B,SAArC;AAEA,QAAMtB,GAAG,CACN2B,IADG,CACED,IADF,EACQF,QADR,EAEHI,IAFG,CAEGtB,QAAD,IAAc;AAChBiB,IAAAA,QAAQ,CAAClB,WAAW,CAACC,QAAQ,CAACuB,IAAV,CAAZ,CAAR;AACAd,IAAAA,YAAY,CAACe,OAAb,CAAqB,OAArB,EAA8BxB,QAAQ,CAACuB,IAAT,CAAcrB,IAAd,CAAmBuB,aAAjD;AACAhB,IAAAA,YAAY,CAACe,OAAb,CAAqB,QAArB,EAA+BxB,QAAQ,CAACuB,IAAT,CAAcrB,IAAd,CAAmBwB,EAAlD;AACD,GANC,CAAN;AAQD,CAnBI;AAsBP,OAAO,MAAMC,SAAS,GAAG,MAAM,OAAOV,QAAP,EAAiBW,QAAjB,KAA8B;AAC3D,MAAI1B,IAAI,GAAG0B,QAAQ,GAAGhB,IAAX,CAAgBiB,MAA3B;AACAZ,EAAAA,QAAQ,CAACrB,SAAS,EAAV,CAAR;AACAkC,EAAAA,IAAI,CAACC,SAAL,CAAe7B,IAAf;AACA,QAAMR,GAAG,CACNsC,GADG,CACE,UAAS9B,IAAK,EADhB,EAEHoB,IAFG,CAEGtB,QAAD,IAAc;AAClBiB,IAAAA,QAAQ,CAACgB,gBAAgB,CAACjC,QAAQ,CAACuB,IAAV,CAAjB,CAAR;AACD,GAJG,EAKHW,KALG,CAKIC,GAAD,IAAS;AACdlB,IAAAA,QAAQ,CAACmB,aAAa,CAACD,GAAD,CAAd,CAAR;AACD,GAPG,CAAN;AAQD,CAZM;AAcP,OAAO,MAAMC,aAAa,GAAI9B,KAAD,IAAW;AACtC,SAAO;AACLT,IAAAA,IAAI,EAAEF,WAAW,CAAC0C,eADb;AAEL/B,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAM2B,gBAAgB,GAAI/B,IAAD,IAAU;AACxCoC,EAAAA,OAAO,CAACC,GAAR,CAAYrC,IAAZ;AACA,SAAO;AACLL,IAAAA,IAAI,EAAEF,WAAW,CAAC6C,kBADb;AAELtC,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAFN;AAGLC,IAAAA,IAAI,EAAED,IAAI,CAACC,IAHN;AAILC,IAAAA,eAAe,EAAEF,IAAI,CAACE;AAJjB,GAAP;AAMD,CARM;AAUP,OAAO,MAAMqC,mBAAmB,GAAIrB,IAAD,IAAU;AAC3C,SAAO;AACLvB,IAAAA,IAAI,EAAEF,WAAW,CAAC+C,sBADb;AAELtB,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAID,CALM","sourcesContent":["import api from \"../apis/api\";\nimport * as actionTypes from \"./actionTypes\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START,\n  };\n};\n\nexport const authSuccess = (response) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    user: user.user,\n    plan: user.plan,\n    plan_membership: user.plan_membership,\n  };\n};\n\nexport const authFail = (error) => {\n\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error,\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"userId\");\n  return {\n    type: actionTypes.AUTH_LOGOUT,\n  };\n};\n\nexport const auth = (email, password, name, isSignup) => \n   async (dispatch) => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      name: name,\n      returnSecureToken: true,\n    };\n    let path = !isSignup ? `/session` : `/users/`;\n\n    await api\n      .post(path, authData)\n      .then((response) => {\n          dispatch(authSuccess(response.data))\n          localStorage.setItem(\"token\", response.data.user.session_token);\n          localStorage.setItem(\"userId\", response.data.user.id);\n        }\n      )\n  };\n\n\nexport const fetchUser = () => async (dispatch, getState) => {\n  let user = getState().auth.userId\n  dispatch(authStart())\n  JSON.stringify(user);\n  await api\n    .get(`/users/${user}`)\n    .then((response) => {\n      dispatch(fetchUserSuccess(response.data));\n    })\n    .catch((err) => {\n      dispatch(fetchUserFail(err));\n    });\n};\n\nexport const fetchUserFail = (error) => {\n  return {\n    type: actionTypes.FETCH_USER_FAIL,\n    error: error,\n  };\n};\n\nexport const fetchUserSuccess = (user) => {\n  console.log(user)\n  return {\n    type: actionTypes.FETCH_USER_SUCCESS,\n    user: user.user,\n    plan: user.plan,\n    plan_membership: user.plan_membership\n  };\n};\n\nexport const setAuthRedirectPath = (path) => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path,\n  };\n};"]},"metadata":{},"sourceType":"module"}