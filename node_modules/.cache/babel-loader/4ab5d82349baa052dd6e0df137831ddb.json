{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\nconst initialState = {\n  cart_id: null,\n  member_id: null,\n  cart_items: [],\n  error: null,\n  loading: false,\n  error_message: ''\n};\n\nconst setCart = (state, action) => {\n  console.log(state, action);\n\n  if (action.payload !== null) {\n    return updateObject(state, {\n      cart_id: action.payload.id,\n      member_id: action.payload.member_id,\n      cart_items: action.payload.cart_items,\n      loading: false,\n      error: null\n    });\n  }\n\n  return updateObject(state, {\n    message: \"You must be a subscriber to place orders\"\n  });\n};\n\nconst startFetchCart = (state, action) => {\n  console.log(state, action.payload);\n  return updateObject(state, {\n    loading: true,\n    error: null\n  });\n};\n\nconst addProductToCart = (state, action) => {\n  console.log(state, action.payload);\n  let updatedCart;\n\n  if (state.cart_items === [] || state.cart_items === 'undefined') {\n    updatedCart = [...state.cart_items, action.payload];\n  } else {\n    updatedCart = [action.payload];\n  }\n\n  return updateObject(state, {\n    cart_items: updatedCart,\n    error: null,\n    loading: false\n  });\n};\n\nconst removeProductFromCart = (state, action) => {\n  console.log(state, action.payload);\n  let cart_item = state.cart_items.filter(item => item.id === action.payload);\n  console.log(cart_item);\n  const updatedCart = [];\n  console.log(action.payload, updatedCart);\n  state.cart_items.map(cartItem => {\n    if (cartItem.id !== action.payload) {\n      updatedCart.push({ ...cartItem\n      });\n    }\n  });\n  return updateObject(state, {\n    cart_items: [...updatedCart]\n  });\n};\n\nconst fetchCartFailed = (state, action) => {\n  console.log(state, action.payload.message);\n  return updateObject(state, {\n    error: true,\n    loading: false,\n    message: \"You must be a subscriber to place orders\"\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CART:\n      return setCart(state, action);\n\n    case actionTypes.ADD_PRODUCT_TO_CART:\n      return addProductToCart(state, action);\n\n    case actionTypes.REMOVE_PRODUCT_FROM_CART:\n      return removeProductFromCart(state, action);\n\n    case actionTypes.FETCH_CART_FAILED:\n      return fetchCartFailed(state, action);\n\n    case actionTypes.START_FETCH_CART:\n      return startFetchCart(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/reducers/CartsReducer.js"],"names":["actionTypes","updateObject","initialState","cart_id","member_id","cart_items","error","loading","error_message","setCart","state","action","console","log","payload","id","message","startFetchCart","addProductToCart","updatedCart","removeProductFromCart","cart_item","filter","item","map","cartItem","push","fetchCartFailed","reducer","type","SET_CART","ADD_PRODUCT_TO_CART","REMOVE_PRODUCT_FROM_CART","FETCH_CART_FAILED","START_FETCH_CART"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\n\nconst initialState = {\n    cart_id: null,\n    member_id: null,\n    cart_items: [],\n    error: null,\n    loading: false,\n    error_message: ''\n};\n\nconst setCart = (state, action) => {\n  console.log(state, action)\n  if (action.payload !==null ){\n  return updateObject(state, {\n    cart_id: action.payload.id,\n    member_id: action.payload.member_id,\n    cart_items: action.payload.cart_items,\n    loading: false,\n    error: null,\n   \n  });\n  } return updateObject(state,{ message: \"You must be a subscriber to place orders\"})\n}\n\nconst startFetchCart = (state, action) => {\n  console.log(state, action.payload)\n  return updateObject(state, {\n    loading: true, error: null\n  })\n}\n\nconst addProductToCart = (state, action) => {\n    console.log(state, action.payload);\n    let updatedCart\n    if (state.cart_items === [] || state.cart_items === 'undefined') \n      {updatedCart = [...state.cart_items, action.payload]}\n    else {updatedCart = [action.payload]}\n  return updateObject(state, {\n    cart_items: updatedCart,\n    error: null,\n    loading: false\n  })\n}\n\nconst removeProductFromCart = (state, action) => {\n  console.log(state, action.payload)\n  let cart_item = state.cart_items.filter(item => item.id === action.payload)\n  console.log(cart_item)\n  const updatedCart = [];\n  \n  console.log(action.payload, updatedCart)\n  state.cart_items.map((cartItem) => {\n    if (cartItem.id !== action.payload) {\n      updatedCart.push({ ...cartItem });\n    }\n  })\n  return updateObject(state, {\n    cart_items: [...updatedCart],\n  });\n}\n\nconst fetchCartFailed = (state, action) => {\n  console.log(state, action.payload.message)\n  return updateObject(state,{ error: true, loading: false,  message: \"You must be a subscriber to place orders\"})\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CART:\n      return setCart(state, action);\n    case actionTypes.ADD_PRODUCT_TO_CART:\n      return addProductToCart(state, action);\n    case actionTypes.REMOVE_PRODUCT_FROM_CART:\n      return removeProductFromCart(state, action);\n    case actionTypes.FETCH_CART_FAILED:\n      return fetchCartFailed(state, action);\n    case actionTypes.START_FETCH_CART:\n      return startFetchCart(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}