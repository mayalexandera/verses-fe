{"ast":null,"code":"import api from \"../apis/api\";\nimport _ from \"lodash\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as actions from \"../actions/index\";\nexport const fetchProdByBrand = brand_id => async dispatch => {\n  const response = await api.get(`/brands/${brand_id}/products`);\n  dispatch({\n    type: actionTypes.FETCH_PRODUCTS_BY_BRAND,\n    payload: response.data\n  });\n};\nexport const fetchProdByCategory = category => async dispatch => {\n  const response = await api.get(`/products/`, {\n    params: {\n      category: category\n    }\n  });\n  dispatch({\n    type: actionTypes.FETCH_PRODUCTS_BY_CATEGORY,\n    payload: response.data\n  });\n};\nexport const fetchProdBySize = size => async dispatch => {\n  const response = await api.get(`/products/`, {\n    params: {\n      size: size\n    }\n  }).then(dispatch({\n    type: actionTypes.FETCH_PRODUCTS_BY_SIZE,\n    payload: response.data\n  }));\n};\nexport const fetchProductsFailed = () => {\n  return {\n    type: actionTypes.FETCH_PRODUCTS_FAILED\n  };\n};\nexport const setProducts = products => {\n  return {\n    type: actionTypes.SET_PRODUCTS,\n    products: products\n  };\n};\nexport const setShowProduct = product => async dispatch => {\n  console.log(product);\n  dispatch(actions.setBrand(product.brand_id)).then(dispatch(actions.fetchShowProductSizes(product.brand_id, product.id))).then(dispatch({\n    type: actionTypes.SET_SHOW_PRODUCT,\n    payload: product\n  }));\n};\nexport const initProducts = () => async dispatch => {\n  await api.get(`/products/`).then(resp => {\n    dispatch(setProducts(resp.data));\n  }).catch(error => {\n    dispatch(fetchProductsFailed());\n  });\n};\nexport const fetchShowProduct = prod_id => async dispatch => {\n  console.log(\"in fetchSHow\");\n  await api.get(`products/${prod_id}`).then(resp => {\n    dispatch(setShowProduct(resp.data));\n  }).catch(error => {\n    dispatch(fetchProductsFailed());\n  });\n};\nexport const fetchFaveProduct = prod_id => async dispatch => {\n  const response = await api.get(`products/${prod_id}`);\n  dispatch({\n    type: actionTypes.FETCH_FAVE_PROD,\n    payload: response.data\n  });\n}; // export const fetchProdAndBrands = () => async (dispatch, getState) => {\n//   await dispatch(fetchAllProd());\n//   _.chain(getState().products)\n//     .map(\"brand_id\")\n//     .uniq()\n//     .forEach((id) => dispatch(fetchBrand(id)))\n//     .value();\n// };","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/actions/ProductsActions.js"],"names":["api","_","actionTypes","actions","fetchProdByBrand","brand_id","dispatch","response","get","type","FETCH_PRODUCTS_BY_BRAND","payload","data","fetchProdByCategory","category","params","FETCH_PRODUCTS_BY_CATEGORY","fetchProdBySize","size","then","FETCH_PRODUCTS_BY_SIZE","fetchProductsFailed","FETCH_PRODUCTS_FAILED","setProducts","products","SET_PRODUCTS","setShowProduct","product","console","log","setBrand","fetchShowProductSizes","id","SET_SHOW_PRODUCT","initProducts","resp","catch","error","fetchShowProduct","prod_id","fetchFaveProduct","FETCH_FAVE_PROD"],"mappings":"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","sourcesContent":["import api from \"../apis/api\";\nimport _ from \"lodash\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as actions from \"../actions/index\";\n\nexport const fetchProdByBrand = (brand_id) => async (dispatch) => {\n  const response = await api.get(`/brands/${brand_id}/products`);\n  dispatch({\n    type: actionTypes.FETCH_PRODUCTS_BY_BRAND,\n    payload: response.data,\n  });\n};\n\nexport const fetchProdByCategory = (category) => async (dispatch) => {\n  const response = await api.get(`/products/`, {\n    params: {\n      category: category,\n    },\n  });\n  dispatch({\n    type: actionTypes.FETCH_PRODUCTS_BY_CATEGORY,\n    payload: response.data,\n  });\n};\n\nexport const fetchProdBySize = (size) => async (dispatch) => {\n  const response = await api\n    .get(`/products/`, {\n      params: {\n        size: size,\n      },\n    })\n    .then(\n      dispatch({\n        type: actionTypes.FETCH_PRODUCTS_BY_SIZE,\n        payload: response.data,\n      })\n    );\n};\n\nexport const fetchProductsFailed = () => {\n  return {\n    type: actionTypes.FETCH_PRODUCTS_FAILED,\n  };\n};\n\nexport const setProducts = (products) => {\n  return {\n    type: actionTypes.SET_PRODUCTS,\n    products: products,\n  };\n};\n\nexport const setShowProduct = (product) => async dispatch => {\n  console.log(product);\n  dispatch(actions.setBrand(product.brand_id)).then(\n    dispatch(actions.fetchShowProductSizes(product.brand_id, product.id))\n  ).then(dispatch({type: actionTypes.SET_SHOW_PRODUCT, payload: product}))\n\n};\n\n\n\nexport const initProducts = () => async (dispatch) => {\n  await api\n    .get(`/products/`)\n    .then((resp) => {\n      dispatch(setProducts(resp.data));\n    })\n    .catch((error) => {\n      dispatch(fetchProductsFailed());\n    });\n};\n\nexport const fetchShowProduct = (prod_id) => async (dispatch) => {\n  console.log(\"in fetchSHow\");\n  await api\n    .get(`products/${prod_id}`)\n    .then((resp) => {\n      dispatch(setShowProduct(resp.data));\n    })\n    .catch((error) => {\n      dispatch(fetchProductsFailed());\n    });\n};\n\nexport const fetchFaveProduct = (prod_id) => async (dispatch) => {\n  const response = await api.get(`products/${prod_id}`);\n  dispatch({ type: actionTypes.FETCH_FAVE_PROD, payload: response.data });\n};\n\n\n// export const fetchProdAndBrands = () => async (dispatch, getState) => {\n//   await dispatch(fetchAllProd());\n\n//   _.chain(getState().products)\n//     .map(\"brand_id\")\n//     .uniq()\n//     .forEach((id) => dispatch(fetchBrand(id)))\n//     .value();\n// };\n"]},"metadata":{},"sourceType":"module"}