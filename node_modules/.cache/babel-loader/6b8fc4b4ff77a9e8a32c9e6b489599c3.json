{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\nconst initialState = {\n  orders: [],\n  error: null,\n  loading: false\n};\n\nconst startOrder = state => {\n  return updateObject(state, {\n    loading: false\n  });\n};\n\nconst orderSuccess = (state, action) => {\n  if (action.payload.length < 1 || action.payload === state.orders) {\n    return state;\n  } else {\n    const updated = [];\n    state.orders.map(order => {\n      updated.push({ ...order\n      });\n    });\n    updated.push({ ...action.payload.order\n    });\n    return updateObject(state, {\n      orders: [...updated],\n      error: null,\n      loading: false\n    });\n  }\n};\n\nconst fetchOrderSuccess = (state, action) => {\n  if (action.payload.length < 1 || action.payload === state.orders) {\n    return updateObject(state, {\n      orders: []\n    });\n  } else if (action.payload.length === 1) {\n    return updateObject(state, {\n      orders: action.payload,\n      loading: false,\n      error: null\n    });\n  } else {\n    return updateObject(state, {\n      orders: [...action.payload],\n      loading: false,\n      error: null\n    });\n  }\n};\n\nconst orderFailed = (state, action) => {\n  return updateObject(state, {\n    error: true,\n    loading: false\n  });\n};\n\nconst deleteOrder = (state, action) => {\n  const updated = [];\n  state.orders.map(order => {\n    if (order.id !== action.payload) {\n      updated.push({ ...order\n      });\n    }\n  });\n  return updateObject(state, {\n    orders: [...updated]\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.START_ORDER:\n      return startOrder(state, action);\n\n    case actionTypes.DELETE_ORDER:\n      return deleteOrder(state, action);\n\n    case actionTypes.ORDER_FAILED:\n      return orderFailed(state, action);\n\n    case actionTypes.ORDER_SUCCESS:\n      return orderSuccess(state, action);\n\n    case actionTypes.FETCH_ORDER_SUCCESS:\n      return fetchOrderSuccess(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/reducers/ordersReducer.js"],"names":["actionTypes","updateObject","initialState","orders","error","loading","startOrder","state","orderSuccess","action","payload","length","updated","map","order","push","fetchOrderSuccess","orderFailed","deleteOrder","id","reducer","type","START_ORDER","DELETE_ORDER","ORDER_FAILED","ORDER_SUCCESS","FETCH_ORDER_SUCCESS"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;;AAMA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,SAAON,YAAY,CAACM,KAAD,EAAQ;AACzBF,IAAAA,OAAO,EAAE;AADgB,GAAR,CAAnB;AAGD,CAJD;;AAMA,MAAMG,YAAY,GAAG,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACtC,MAAIA,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwB,CAAxB,IAA6BF,MAAM,CAACC,OAAP,KAAmBH,KAAK,CAACJ,MAA1D,EAAkE;AAChE,WAAOI,KAAP;AACD,GAFD,MAEO;AACL,UAAMK,OAAO,GAAG,EAAhB;AACAL,IAAAA,KAAK,CAACJ,MAAN,CAAaU,GAAb,CAAkBC,KAAD,IAAW;AAC1BF,MAAAA,OAAO,CAACG,IAAR,CAAa,EAAE,GAAGD;AAAL,OAAb;AACD,KAFD;AAGAF,IAAAA,OAAO,CAACG,IAAR,CAAa,EAAE,GAAGN,MAAM,CAACC,OAAP,CAAeI;AAApB,KAAb;AAEA,WAAOb,YAAY,CAACM,KAAD,EAAQ;AACzBJ,MAAAA,MAAM,EAAE,CAAC,GAAGS,OAAJ,CADiB;AAEzBR,MAAAA,KAAK,EAAE,IAFkB;AAGzBC,MAAAA,OAAO,EAAE;AAHgB,KAAR,CAAnB;AAKD;AACF,CAhBD;;AAkBA,MAAMW,iBAAiB,GAAG,CAACT,KAAD,EAAQE,MAAR,KAAmB;AAC3C,MAAIA,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwB,CAAxB,IAA6BF,MAAM,CAACC,OAAP,KAAmBH,KAAK,CAACJ,MAA1D,EAAkE;AAChE,WAAOF,YAAY,CAACM,KAAD,EAAQ;AAAEJ,MAAAA,MAAM,EAAE;AAAV,KAAR,CAAnB;AACD,GAFD,MAEO,IAAIM,MAAM,CAACC,OAAP,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AACtC,WAAOV,YAAY,CAACM,KAAD,EAAQ;AACzBJ,MAAAA,MAAM,EAAEM,MAAM,CAACC,OADU;AAEzBL,MAAAA,OAAO,EAAE,KAFgB;AAGzBD,MAAAA,KAAK,EAAE;AAHkB,KAAR,CAAnB;AAKD,GANM,MAMA;AACL,WAAOH,YAAY,CAACM,KAAD,EAAQ;AACzBJ,MAAAA,MAAM,EAAE,CAAC,GAAGM,MAAM,CAACC,OAAX,CADiB;AAEzBL,MAAAA,OAAO,EAAE,KAFgB;AAGzBD,MAAAA,KAAK,EAAE;AAHkB,KAAR,CAAnB;AAKD;AACF,CAhBD;;AAkBA,MAAMa,WAAW,GAAG,CAACV,KAAD,EAAQE,MAAR,KAAmB;AACrC,SAAOR,YAAY,CAACM,KAAD,EAAQ;AACzBH,IAAAA,KAAK,EAAE,IADkB;AAEzBC,IAAAA,OAAO,EAAE;AAFgB,GAAR,CAAnB;AAID,CALD;;AAOA,MAAMa,WAAW,GAAG,CAACX,KAAD,EAAQE,MAAR,KAAmB;AACrC,QAAMG,OAAO,GAAG,EAAhB;AACAL,EAAAA,KAAK,CAACJ,MAAN,CAAaU,GAAb,CAAkBC,KAAD,IAAW;AAC1B,QAAIA,KAAK,CAACK,EAAN,KAAaV,MAAM,CAACC,OAAxB,EAAiC;AAC/BE,MAAAA,OAAO,CAACG,IAAR,CAAa,EAAE,GAAGD;AAAL,OAAb;AACD;AACF,GAJD;AAKA,SAAOb,YAAY,CAACM,KAAD,EAAQ;AACzBJ,IAAAA,MAAM,EAAE,CAAC,GAAGS,OAAJ;AADiB,GAAR,CAAnB;AAGD,CAVD;;AAYA,MAAMQ,OAAO,GAAG,CAACb,KAAK,GAAGL,YAAT,EAAuBO,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACY,IAAf;AACE,SAAKrB,WAAW,CAACsB,WAAjB;AACE,aAAOhB,UAAU,CAACC,KAAD,EAAQE,MAAR,CAAjB;;AACF,SAAKT,WAAW,CAACuB,YAAjB;AACE,aAAOL,WAAW,CAACX,KAAD,EAAQE,MAAR,CAAlB;;AACF,SAAKT,WAAW,CAACwB,YAAjB;AACE,aAAOP,WAAW,CAACV,KAAD,EAAQE,MAAR,CAAlB;;AACF,SAAKT,WAAW,CAACyB,aAAjB;AACE,aAAOjB,YAAY,CAACD,KAAD,EAAQE,MAAR,CAAnB;;AACF,SAAKT,WAAW,CAAC0B,mBAAjB;AACE,aAAOV,iBAAiB,CAACT,KAAD,EAAQE,MAAR,CAAxB;;AACF;AACE,aAAOF,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAea,OAAf","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\n\nconst initialState = {\n  orders: [],\n  error: null,\n  loading: false\n};\n\nconst startOrder = (state) => {\n  return updateObject(state, {\n    loading: false,\n  });\n};\n\nconst orderSuccess = (state, action) => {\n  if (action.payload.length < 1 || action.payload === state.orders) {\n    return state;\n  } else {\n    const updated = [];\n    state.orders.map((order) => {\n      updated.push({ ...order });\n    });\n    updated.push({ ...action.payload.order });\n\n    return updateObject(state, {\n      orders: [...updated],\n      error: null,\n      loading: false,\n    });\n  }\n};\n\nconst fetchOrderSuccess = (state, action) => {\n  if (action.payload.length < 1 || action.payload === state.orders) {\n    return updateObject(state, { orders: [] });\n  } else if (action.payload.length === 1) {\n    return updateObject(state, {\n      orders: action.payload,\n      loading: false,\n      error: null,\n    });\n  } else {\n    return updateObject(state, {\n      orders: [...action.payload],\n      loading: false,\n      error: null,\n    });\n  }\n};\n\nconst orderFailed = (state, action) => {\n  return updateObject(state, {\n    error: true,\n    loading: false,\n  });\n};\n\nconst deleteOrder = (state, action) => {\n  const updated = [];\n  state.orders.map((order) => {\n    if (order.id !== action.payload) {\n      updated.push({ ...order });\n    }\n  });\n  return updateObject(state, {\n    orders: [...updated],\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.START_ORDER:\n      return startOrder(state, action);\n    case actionTypes.DELETE_ORDER:\n      return deleteOrder(state, action);\n    case actionTypes.ORDER_FAILED:\n      return orderFailed(state, action);\n    case actionTypes.ORDER_SUCCESS:\n      return orderSuccess(state, action);\n    case actionTypes.FETCH_ORDER_SUCCESS:\n      return fetchOrderSuccess(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}