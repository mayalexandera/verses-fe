{"ast":null,"code":"import api from \"../apis/api\";\nimport * as actionTypes from \"./actionTypes\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  console.log(token, userId);\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"userId\");\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const auth = (email, password, name, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      name: name,\n      returnSecureToken: true\n    };\n    let path = !isSignup ? `/session` : `/users/`;\n    api.post(path, authData).then(response => {\n      console.log(response.data);\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem(\"token\", response.data.session_token);\n      console.log(localStorage);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userId\", response.data.id);\n      dispatch(authSuccess(response.data.session_token, response.data.id));\n    }).catch(err => {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const userId = localStorage.getItem(\"userId\");\n      dispatch(authSuccess(token, userId));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses_backup/verses_fe-85220142a93b1b708e9311944f3c85a3d9621c1e/src/store/actions/AuthActions.js"],"names":["api","actionTypes","authStart","type","AUTH_START","authSuccess","token","userId","console","log","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","auth","email","password","name","isSignup","dispatch","authData","returnSecureToken","path","post","then","response","data","expirationDate","Date","getTime","expiresIn","setItem","session_token","id","catch","err","setAuthRedirectPath","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import api from \"../apis/api\";\nimport * as actionTypes from \"./actionTypes\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START,\n  };\n};\n\nexport const authSuccess = (token, userId) => {\n  console.log(token, userId)\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId,\n  };\n};\n\nexport const authFail = (error) => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error,\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"userId\");\n  return {\n    type: actionTypes.AUTH_LOGOUT,\n  };\n};\n\nexport const auth = (email, password, name, isSignup) => {\n  return (dispatch) => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      name: name,\n      returnSecureToken: true,\n    };\n     let path = !isSignup ? `/session` : `/users/`;\n\n    api\n      .post(path, authData)\n      .then((response) => {\n        console.log(response.data);\n        const expirationDate = new Date(\n          new Date().getTime() + response.data.expiresIn * 1000\n        );\n        localStorage.setItem(\"token\", response.data.session_token);\n        console.log(localStorage)\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        localStorage.setItem(\"userId\", response.data.id);\n        dispatch(authSuccess(response.data.session_token, response.data.id));\n      })\n      .catch((err) => {\n        dispatch(authFail(err.response.data.error));\n      });\n  };\n};\n\nexport const setAuthRedirectPath = (path) => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path,\n  };\n};\n\nexport const authCheckState = () => {\n  return (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      dispatch(logout());\n    } else {\n        const userId = localStorage.getItem(\"userId\");\n        dispatch(authSuccess(token, userId));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}