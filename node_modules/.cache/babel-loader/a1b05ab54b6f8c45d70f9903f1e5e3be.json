{"ast":null,"code":"// import { updateCartProductSize } from \"../actions\";\nimport * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\nconst initialState = {\n  cart_id: null,\n  member_id: null,\n  cart_items: [],\n  error: null,\n  cart_total: null,\n  loading: false,\n  message: null\n};\n\nconst setCart = (state, action) => {\n  if (action.payload !== null) {\n    return updateObject(state, {\n      cart_id: action.payload.id,\n      member_id: action.payload.member_id,\n      cart_items: action.payload.cart_items,\n      cart_total: action.payload.total_cost_string,\n      loading: false,\n      error: null,\n      message: null\n    });\n  }\n};\n\nconst startFetchCart = (state, action) => {\n  return updateObject(state, {\n    loading: true,\n    error: null,\n    message: null\n  });\n};\n\nconst addProductToCart = (state, action) => {\n  let updatedCart;\n\n  if (state.cart_items !== [] || state.cart_items !== \"undefined\") {\n    updatedCart = [...state.cart_items, { ...action.payload\n    }];\n  } else {\n    updatedCart = [action.payload];\n  }\n\n  return updateObject(state, {\n    cart_items: [...updatedCart],\n    error: null,\n    loading: false,\n    message: null\n  });\n};\n\nconst updateCartProductSize = (state, action) => {\n  let cart_item = state.cart_items.filter(item => item.id === action.payload.cart_item.id)[0];\n  const updatedCart = [];\n  state.cart_items.map(cartItem => {\n    if (cartItem.id !== cart_item.id) {\n      updatedCart.push({ ...cartItem\n      });\n    }\n  });\n  updatedCart.push({ ...action.payload.cart_item\n  });\n  return updateObject(state, {\n    cart_items: [...updatedCart],\n    error: null,\n    message: null,\n    cart_total: action.payload.cart.total_cost_string,\n    loading: false\n  });\n};\n\nconst updateCartProductQty = (state, action) => {\n  let cart_item = state.cart_items.filter(item => item.id === action.payload.cart_item.id)[0];\n  const updatedCart = [];\n  state.cart_items.map(cartItem => {\n    if (cartItem.id !== cart_item.id) {\n      updatedCart.push({ ...cartItem\n      });\n    }\n  });\n  updatedCart.push({ ...action.payload.cart_item\n  });\n  return updateObject(state, {\n    cart_items: [...updatedCart],\n    error: null,\n    message: null,\n    cart_total: action.payload.cart.total_cost_string,\n    loading: false\n  });\n};\n\nconst removeProductFromCart = (state, action) => {\n  let cart_item = state.cart_items.filter(item => item.id === action.payload);\n  const updatedCart = [];\n  state.cart_items.map(cartItem => {\n    if (cartItem.id !== action.payload[1]) {\n      updatedCart.push({ ...cartItem\n      });\n    }\n  });\n  return updateObject(state, {\n    cart_items: [...updatedCart],\n    error: false,\n    message: null,\n    cart_total: action.payload[0]\n  });\n};\n\nconst fetchCartFailed = (state, action) => {\n  return updateObject(state, {\n    error: true,\n    loading: false,\n    message: \"You must be a subscriber to place orders\"\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CART:\n      return setCart(state, action);\n\n    case actionTypes.ADD_PRODUCT_TO_CART:\n      return addProductToCart(state, action);\n\n    case actionTypes.REMOVE_PRODUCT_FROM_CART:\n      return removeProductFromCart(state, action);\n\n    case actionTypes.UPDATE_CART_PRODUCT_SIZE:\n      return updateCartProductSize(state, action);\n\n    case actionTypes.UPDATE_CART_PRODUCT_QTY:\n      return updateCartProductQty(state, action);\n\n    case actionTypes.FETCH_CART_FAILED:\n      return fetchCartFailed(state, action);\n\n    case actionTypes.START_FETCH_CART:\n      return startFetchCart(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/reducers/CartsReducer.js"],"names":["actionTypes","updateObject","initialState","cart_id","member_id","cart_items","error","cart_total","loading","message","setCart","state","action","payload","id","total_cost_string","startFetchCart","addProductToCart","updatedCart","updateCartProductSize","cart_item","filter","item","map","cartItem","push","cart","updateCartProductQty","removeProductFromCart","fetchCartFailed","reducer","type","SET_CART","ADD_PRODUCT_TO_CART","REMOVE_PRODUCT_FROM_CART","UPDATE_CART_PRODUCT_SIZE","UPDATE_CART_PRODUCT_QTY","FETCH_CART_FAILED","START_FETCH_CART"],"mappings":"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","sourcesContent":["// import { updateCartProductSize } from \"../actions\";\nimport * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\n\nconst initialState = {\n  cart_id: null,\n  member_id: null,\n  cart_items: [],\n  error: null,\n  cart_total: null,\n  loading: false,\n  message: null,\n};\n\nconst setCart = (state, action) => {\n  if (action.payload !== null) {\n    return updateObject(state, {\n      cart_id: action.payload.id,\n      member_id: action.payload.member_id,\n      cart_items: action.payload.cart_items,\n      cart_total: action.payload.total_cost_string,\n      loading: false,\n      error: null,\n      message: null,\n    });\n  }\n};\n\nconst startFetchCart = (state, action) => {\n  return updateObject(state, {\n    loading: true,\n    error: null,\n    message: null,\n  });\n};\n\nconst addProductToCart = (state, action) => {\n  let updatedCart;\n  if (state.cart_items !== [] || state.cart_items !== \"undefined\") {\n    updatedCart = [...state.cart_items, { ...action.payload }];\n  } else {\n    updatedCart = [action.payload];\n  }\n\n  return updateObject(state, {\n    cart_items: [...updatedCart],\n    error: null,\n    loading: false,\n    message: null,\n  });\n};\n\nconst updateCartProductSize = (state, action) => {\n  let cart_item = state.cart_items.filter(item => item.id === action.payload.cart_item.id)[0]\n  const updatedCart = []\n\n  state.cart_items.map(cartItem => {\n    if (cartItem.id !== cart_item.id) {\n      updatedCart.push({...cartItem})\n    }\n  })\n  \n  updatedCart.push({...action.payload.cart_item})\n  return updateObject(state, {\n    cart_items: [...updatedCart],\n    error: null,\n    message: null,\n    cart_total: action.payload.cart.total_cost_string,\n    loading: false,\n  })\n}\n\nconst updateCartProductQty = (state, action) => {\n  let cart_item = state.cart_items.filter(\n    (item) => item.id === action.payload.cart_item.id\n  )[0];\n  const updatedCart = [];\n\n  state.cart_items.map((cartItem) => {\n    if (cartItem.id !== cart_item.id) {\n      updatedCart.push({ ...cartItem });\n    }\n  });\n  \n  updatedCart.push({ ...action.payload.cart_item });\n  return updateObject(state, {\n    cart_items: [...updatedCart],\n    error: null,\n    message: null,\n    cart_total: action.payload.cart.total_cost_string,\n    loading: false,\n  });\n}\n\nconst removeProductFromCart = (state, action) => {\n  let cart_item = state.cart_items.filter((item) => item.id === action.payload);\n  const updatedCart = [];\n\n  state.cart_items.map((cartItem) => {\n    if (cartItem.id !== action.payload[1]) {\n      updatedCart.push({ ...cartItem });\n    }\n  });\n  return updateObject(state, {\n    cart_items: [...updatedCart],\n    error: false,\n    message: null,\n    cart_total: action.payload[0]\n  });\n};\n\nconst fetchCartFailed = (state, action) => {\n  return updateObject(state, {\n    error: true,\n    loading: false,\n    message: \"You must be a subscriber to place orders\",\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CART:\n      return setCart(state, action);\n    case actionTypes.ADD_PRODUCT_TO_CART:\n      return addProductToCart(state, action);\n    case actionTypes.REMOVE_PRODUCT_FROM_CART:\n      return removeProductFromCart(state, action);\n    case actionTypes.UPDATE_CART_PRODUCT_SIZE:\n      return updateCartProductSize(state, action);\n    case actionTypes.UPDATE_CART_PRODUCT_QTY:\n      return updateCartProductQty(state, action);\n    case actionTypes.FETCH_CART_FAILED:\n      return fetchCartFailed(state, action);\n    case actionTypes.START_FETCH_CART:\n      return startFetchCart(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}