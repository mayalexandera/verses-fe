{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\nimport { remove, isUndefined } from \"lodash\";\nconst initialState = {\n  cart_id: null,\n  member_id: null,\n  cart_items: [],\n  cart_products: [],\n  error: null,\n  loading: false\n};\n\nconst setCart = (state, action) => {\n  console.log(state, action);\n\n  if (action.payload !== null) {\n    return updateObject(state, {\n      cart_id: action.payload.id,\n      member_id: action.payload.member_id,\n      cart_items: action.payload.cart_items,\n      cart_products: action.payload.products,\n      loading: false,\n      error: null\n    });\n  }\n}; //remove cart products\n\n\nconst resetCart = (state, action) => {};\n\nconst startFetchCart = (state, action) => {\n  console.log(state, action.payload);\n  return updateObject(state, {\n    loading: true,\n    error: null\n  });\n};\n\nconst addProductToCart = (state, action) => {\n  console.log(state, action.payload);\n  const updatedCart = [...state.cart_items, action.payload];\n  return updateObject(state, {\n    cart_items: updatedCart,\n    error: null,\n    loading: false\n  });\n};\n\nconst removeProductFromCart = (state, action) => {\n  console.log(state, action.payload);\n  let cart_item = state.cart_items.filter(item => item.id === action.payload);\n  console.log(cart_item);\n  const updatedCart = [];\n  console.log(action.payload, updatedCart);\n  state.cart_items.map(cartItem => {\n    if (cartItem.id !== action.payload) {\n      updatedCart.push({ ...cartItem\n      });\n    }\n  });\n  return updateObject(state, {\n    cart_items: [...updatedCart]\n  });\n};\n\nconst fetchCartFailed = (state, action) => {\n  console.log(state, action.payload.message);\n  return updateObject(state, {\n    error: true,\n    loading: false\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CART:\n      return setCart(state, action);\n\n    case actionTypes.ADD_PRODUCT_TO_CART:\n      return addProductToCart(state, action);\n\n    case actionTypes.REMOVE_PRODUCT_FROM_CART:\n      return removeProductFromCart(state, action);\n\n    case actionTypes.FETCH_CART_FAILED:\n      return fetchCartFailed(state, action);\n\n    case actionTypes.START_FETCH_CART:\n      return startFetchCart(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/reducers/CartsReducer.js"],"names":["actionTypes","updateObject","remove","isUndefined","initialState","cart_id","member_id","cart_items","cart_products","error","loading","setCart","state","action","console","log","payload","id","products","resetCart","startFetchCart","addProductToCart","updatedCart","removeProductFromCart","cart_item","filter","item","map","cartItem","push","fetchCartFailed","message","reducer","type","SET_CART","ADD_PRODUCT_TO_CART","REMOVE_PRODUCT_FROM_CART","FETCH_CART_FAILED","START_FETCH_CART"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\nimport { remove, isUndefined } from \"lodash\";\n\n\nconst initialState = {\n    cart_id: null,\n    member_id: null,\n    cart_items: [],\n    cart_products: [],\n    error: null,\n    loading: false,\n};\n\nconst setCart = (state, action) => {\n  console.log(state, action)\n  if (action.payload !==null ){\n  return updateObject(state, {\n      cart_id: action.payload.id,\n      member_id: action.payload.member_id,\n      cart_items: action.payload.cart_items,\n      cart_products: action.payload.products,\n      loading: false,\n      error: null\n    })\n  } \n}\n\n//remove cart products\nconst resetCart = (state, action) => {\n  \n}\n\nconst startFetchCart = (state, action) => {\n  console.log(state, action.payload)\n  return updateObject(state, {\n    loading: true, error: null\n  })\n}\n\nconst addProductToCart = (state, action) => {\n    console.log(state, action.payload);\n  const updatedCart = [...state.cart_items, action.payload]\n  return updateObject(state, {\n    cart_items: updatedCart,\n    error: null,\n    loading: false\n  })\n}\n\nconst removeProductFromCart = (state, action) => {\n  console.log(state, action.payload)\n  let cart_item = state.cart_items.filter(item => item.id === action.payload)\n  console.log(cart_item)\n  const updatedCart = [];\n  \n  console.log(action.payload, updatedCart)\n  state.cart_items.map((cartItem) => {\n    if (cartItem.id !== action.payload) {\n      updatedCart.push({ ...cartItem });\n    }\n  })\n  return updateObject(state, {\n    cart_items: [...updatedCart],\n  });\n}\n\nconst fetchCartFailed = (state, action) => {\n  console.log(state, action.payload.message)\n  return updateObject(state,{ error: true, loading: false})\n} \n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CART:\n      return setCart(state, action);\n    case actionTypes.ADD_PRODUCT_TO_CART:\n      return addProductToCart(state, action);\n    case actionTypes.REMOVE_PRODUCT_FROM_CART:\n      return removeProductFromCart(state, action);\n    case actionTypes.FETCH_CART_FAILED:\n      return fetchCartFailed(state, action);\n    case actionTypes.START_FETCH_CART:\n      return startFetchCart(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}