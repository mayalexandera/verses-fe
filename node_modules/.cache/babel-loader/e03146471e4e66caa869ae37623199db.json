{"ast":null,"code":"import api from \"../apis/api\";\nimport * as actionTypes from \"../actions/actionTypes\";\nexport const addProductToCart = (user_id, product_id, size) => async dispatch => {\n  await api.post(`/users/${user_id}/cart/cart_items`, {\n    product_id: JSON.stringify(product_id),\n    size: size\n  }).then(resp => dispatch({\n    type: actionTypes.ADD_PRODUCT_TO_CART,\n    payload: resp.data\n  }));\n};\nexport const addCartToFavorite = (member_id, product_id, size, cart_item_id) => async dispatch => {\n  await api.post(`/users/${member_id}/favorites`, {\n    member_id: member_id,\n    product_id: JSON.stringify(product_id),\n    size: size,\n    cart_item_id: JSON.stringify(cart_item_id)\n  }).then(dispatch(removeProductFromCart(cart_item_id)));\n};\nexport const initCart = () => async (dispatch, getState) => {\n  dispatch(startFetchCart());\n  let user = getState().auth.userId;\n  console.log(user);\n  await api.get(`/users/${user}/cart`).then(response => {\n    console.log(response);\n    dispatch(setCart(response.data));\n  }).catch(error => {\n    dispatch(fetchCartFailed(error));\n  });\n};\nexport const startFetchCart = () => {\n  return {\n    type: actionTypes.START_FETCH_CART\n  };\n};\nexport const refreshCart = () => async (dispatch, getState) => {\n  let user = getState().auth.userId;\n  await api.delete(`/users/${user}/cart/refresh`).then(response => dispatch(setCart(response)));\n};\nexport const fetchCartFailed = error => {\n  return {\n    type: actionTypes.FETCH_CART_FAILED,\n    payload: error\n  };\n};\nexport const setCart = cart => {\n  console.log(cart);\n  return {\n    type: actionTypes.SET_CART,\n    payload: cart\n  };\n};\nexport const removeProductFromCart = cart_item_id => async (dispatch, getState) => {\n  let user = getState().auth.userId;\n  await api.delete(`/users/${user}/cart/cart_items/`, {\n    params: {\n      item_id: cart_item_id\n    }\n  }).then(dispatch({\n    type: actionTypes.REMOVE_PRODUCT_FROM_CART,\n    payload: cart_item_id\n  }));\n};","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/actions/CartActions.js"],"names":["api","actionTypes","addProductToCart","user_id","product_id","size","dispatch","post","JSON","stringify","then","resp","type","ADD_PRODUCT_TO_CART","payload","data","addCartToFavorite","member_id","cart_item_id","removeProductFromCart","initCart","getState","startFetchCart","user","auth","userId","console","log","get","response","setCart","catch","error","fetchCartFailed","START_FETCH_CART","refreshCart","delete","FETCH_CART_FAILED","cart","SET_CART","params","item_id","REMOVE_PRODUCT_FROM_CART"],"mappings":"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","sourcesContent":["import api from \"../apis/api\";\nimport * as actionTypes from \"../actions/actionTypes\";\n\nexport const addProductToCart = (user_id, product_id, size) => async (dispatch) => {\n  await api\n    .post(`/users/${user_id}/cart/cart_items`, {\n      product_id: JSON.stringify(product_id),\n      size: size,\n    })\n    .then((resp) =>\n      dispatch({\n        type: actionTypes.ADD_PRODUCT_TO_CART,\n        payload: resp.data,\n      })\n    ); \n};\n\nexport const addCartToFavorite = (\n  member_id,\n  product_id,\n  size,\n  cart_item_id\n) => async (dispatch) => {\n  await api\n    .post(`/users/${member_id}/favorites`, {\n      member_id: member_id,\n      product_id: JSON.stringify(product_id),\n      size: size,\n      cart_item_id: JSON.stringify(cart_item_id),\n    })\n    .then(dispatch(removeProductFromCart(cart_item_id)));\n};\n\nexport const initCart = () => async (dispatch, getState) => {\n\n  dispatch(startFetchCart())\n  let user = getState().auth.userId\n  console.log(user)\n await api.get(`/users/${user}/cart`).then(response => {\n   console.log(response)\n   dispatch(setCart(response.data))\n })\n .catch((error) => {\n   dispatch(fetchCartFailed(error))\n })\n}\n\nexport const startFetchCart = () => {\n  return {\n    type: actionTypes.START_FETCH_CART,\n  };\n};\n\nexport const refreshCart = () => async (dispatch, getState) => {\n  let user = getState().auth.userId\n  await api.delete(`/users/${user}/cart/refresh`)\n  .then(response => dispatch(setCart(response)))\n}\nexport const fetchCartFailed = (error) => {\n  return {\n    type: actionTypes.FETCH_CART_FAILED, payload: error\n  };\n};\n\nexport const setCart = (cart) => {\n  console.log(cart)\n  return {\n    type: actionTypes.SET_CART,\n    payload: cart,\n  };\n};\n\nexport const removeProductFromCart = (cart_item_id) => async (\n  dispatch, getState\n  ) => {\n    \n    let user = getState().auth.userId\n  await api\n    .delete(`/users/${user}/cart/cart_items/`, {params: \n      {item_id: cart_item_id} })\n    .then(\n      dispatch({\n        type: actionTypes.REMOVE_PRODUCT_FROM_CART,\n        payload: cart_item_id,\n      })\n    );\n};\n\n"]},"metadata":{},"sourceType":"module"}