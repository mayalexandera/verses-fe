{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\nconst initialState = {\n  orders: [],\n  error: null,\n  loading: false,\n  error_message: ''\n};\n\nconst startOrder = (state, action) => {\n  console.log(state, action.payload);\n  return updateObject(state, {\n    loading: true\n  });\n};\n\nconst orderSuccess = (state, action) => {\n  console.log(state);\n\n  if (action.payload.length < 1 || action.payload === []) {\n    return state;\n  } else {\n    const updated = [];\n    state.orders.map(order => {\n      updated.push({ ...order\n      });\n    });\n    action.payload.map(order => {\n      updated.push({\n        order\n      });\n    });\n    console.log(action.payload, updated);\n    return updateObject(state, {\n      orders: [...updated],\n      error: null,\n      loading: false\n    });\n  }\n};\n\nconst fetchOrderSuccess = (state, action) => {\n  return action.payload === state.orders ? state : updateObject(state, {\n    orders: [...action.payload],\n    loading: false,\n    error: null,\n    error_message: ''\n  });\n};\n\nconst orderFailed = (state, action) => {\n  console.log(state, action.payload);\n  return updateObject(state, {\n    error: true,\n    message: action.payload.message\n  });\n};\n\nconst deleteOrder = (state, action) => {\n  console.log(state, action.payload);\n  const updated = [];\n  state.orders.map(order => {\n    if (order.id !== action.payload) {\n      updated.push({ ...order\n      });\n    }\n\n    console.log(action.payload, updated);\n  });\n  return updateObject(state, {\n    order: [...updated]\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.START_ORDER:\n      return startOrder(state, action);\n\n    case actionTypes.DELETE_ORDER:\n      return deleteOrder(state, action);\n\n    case actionTypes.ORDER_FAILED:\n      return orderFailed(state, action);\n\n    case actionTypes.ORDER_SUCCESS:\n      return orderSuccess(state, action);\n\n    case actionTypes.FETCH_ORDER_SUCCESS:\n      return fetchOrderSuccess(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/reducers/ordersReducer.js"],"names":["actionTypes","updateObject","initialState","orders","error","loading","error_message","startOrder","state","action","console","log","payload","orderSuccess","length","updated","map","order","push","fetchOrderSuccess","orderFailed","message","deleteOrder","id","reducer","type","START_ORDER","DELETE_ORDER","ORDER_FAILED","ORDER_SUCCESS","FETCH_ORDER_SUCCESS"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\n\nconst initialState = {\n  orders: [],\n  error: null,\n  loading: false,\n  error_message: ''\n}\n\nconst startOrder = (state, action) => {\n  console.log(state, action.payload)\n  return updateObject(state, {\n    loading: true\n  })\n}\n\nconst orderSuccess = (state, action) => {\n  console.log(state)\n  if(action.payload.length < 1 || action.payload === []) {\n    return state\n  } else {\n    const updated = [];\n    state.orders.map(order => {\n      updated.push({...order})\n    })\n    action.payload.map(order => {\n      updated.push({order})\n    })\n    console.log(action.payload, updated)\n    return updateObject(state, {\n      orders: [...updated],\n      error: null,\n      loading: false\n    })\n  }\n}\n\n\nconst fetchOrderSuccess = (state, action) => {\n  return action.payload === state.orders ?  state :\n   updateObject(state,  {\n    orders: [...action.payload],\n    loading: false,\n    error: null,\n    error_message: ''\n  })\n}\n\nconst orderFailed = (state, action) => {\n  console.log(state, action.payload)\n  return updateObject(state, {\n    error: true, message: action.payload.message\n  })\n}\n\nconst deleteOrder = (state, action) => {\n  console.log(state, action.payload) \n  const updated = []\n  state.orders.map(order => {\n    if(order.id !== action.payload) {\n      updated.push({...order})\n    }\n    console.log(action.payload, updated)\n  })\n  return updateObject(state,  {\n    order: [...updated]\n  })\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.START_ORDER:\n      return startOrder(state, action);\n    case actionTypes.DELETE_ORDER:\n      return deleteOrder(state, action);\n    case actionTypes.ORDER_FAILED:\n      return orderFailed(state, action);\n    case actionTypes.ORDER_SUCCESS:\n      return orderSuccess(state, action);\n    case actionTypes.FETCH_ORDER_SUCCESS:\n      return fetchOrderSuccess(state, action);\n    default:\n      return state;\n  }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}