{"ast":null,"code":"import api from \"../apis/api\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as actions from \"../actions/index\";\nexport const initOrder = () => async (dispatch, getState) => {\n  let user = getState().auth.userId;\n  dispatch(startOrder());\n  await api.post(`/users/${user}/orders/`).then(resp => dispatch(orderSuccess(resp.data))).catch(error => {\n    dispatch(orderFailed(error));\n  });\n};\nexport const fetchOrders = () => async (dispatch, getState) => {\n  let user = getState().auth.userId;\n  dispatch(startOrder());\n  await api.get(`/users/${user}/orders/`).then(resp => dispatch(fetchOrderSuccess(resp.data))).catch(error => {\n    dispatch(orderFailed(error));\n  });\n};\nexport const startOrder = () => {\n  return {\n    type: actionTypes.START_ORDER\n  };\n};\nexport const orderFailed = error => {\n  return {\n    type: actionTypes.ORDER_FAILED,\n    payload: error\n  };\n};\nexport const deleteOrder = order_id => async (dispatch, getState) => {\n  let user = getState().auth.userId;\n  console.log(user, order_id);\n  await api.delete(`users/${user}/orders/`, {\n    params: {\n      user_id: user.value\n    }\n  }).then(dispatch({\n    type: actionTypes.DELETE_ORDER,\n    payload: order_id\n  }));\n};\nexport const orderSuccess = order => {\n  actions.refreshCart();\n  return {\n    type: actionTypes.ORDER_SUCCESS,\n    payload: order\n  };\n};\nexport const fetchOrderSuccess = resp => {\n  return {\n    type: actionTypes.FETCH_ORDER_SUCCESS,\n    payload: resp.data\n  };\n};","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/actions/OrderActions.js"],"names":["api","actionTypes","actions","initOrder","dispatch","getState","user","auth","userId","startOrder","post","then","resp","orderSuccess","data","catch","error","orderFailed","fetchOrders","get","fetchOrderSuccess","type","START_ORDER","ORDER_FAILED","payload","deleteOrder","order_id","console","log","delete","params","user_id","value","DELETE_ORDER","order","refreshCart","ORDER_SUCCESS","FETCH_ORDER_SUCCESS"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC3D,MAAIC,IAAI,GAAGD,QAAQ,GAAGE,IAAX,CAAgBC,MAA3B;AACAJ,EAAAA,QAAQ,CAACK,UAAU,EAAX,CAAR;AACA,QAAMT,GAAG,CAACU,IAAJ,CAAU,UAASJ,IAAK,UAAxB,EACLK,IADK,CACAC,IAAI,IAAIR,QAAQ,CAACS,YAAY,CAACD,IAAI,CAACE,IAAN,CAAb,CADhB,EAELC,KAFK,CAECC,KAAK,IAAI;AACdZ,IAAAA,QAAQ,CAACa,WAAW,CAACD,KAAD,CAAZ,CAAR;AACD,GAJK,CAAN;AAKD,CARM;AAUP,OAAO,MAAME,WAAW,GAAG,MAAM,OAAOd,QAAP,EAAiBC,QAAjB,KAA8B;AAC7D,MAAIC,IAAI,GAAGD,QAAQ,GAAGE,IAAX,CAAgBC,MAA3B;AACAJ,EAAAA,QAAQ,CAACK,UAAU,EAAX,CAAR;AACA,QAAMT,GAAG,CAACmB,GAAJ,CAAS,UAASb,IAAK,UAAvB,EACLK,IADK,CACAC,IAAI,IAAIR,QAAQ,CAACgB,iBAAiB,CAACR,IAAI,CAACE,IAAN,CAAlB,CADhB,EAELC,KAFK,CAECC,KAAK,IAAI;AACdZ,IAAAA,QAAQ,CAACa,WAAW,CAACD,KAAD,CAAZ,CAAR;AACD,GAJK,CAAN;AAKD,CARM;AAUP,OAAO,MAAMP,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLY,IAAAA,IAAI,EAAEpB,WAAW,CAACqB;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAML,WAAW,GAAID,KAAD,IAAW;AACpC,SAAO;AACLK,IAAAA,IAAI,EAAEpB,WAAW,CAACsB,YADb;AAC2BC,IAAAA,OAAO,EAAER;AADpC,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMS,WAAW,GAAIC,QAAD,IAAc,OAAOtB,QAAP,EAAiBC,QAAjB,KAA8B;AACrE,MAAIC,IAAI,GAAGD,QAAQ,GAAGE,IAAX,CAAgBC,MAA3B;AACAmB,EAAAA,OAAO,CAACC,GAAR,CAAYtB,IAAZ,EAAkBoB,QAAlB;AACA,QAAM1B,GAAG,CAAC6B,MAAJ,CAAY,SAAQvB,IAAK,UAAzB,EAAoC;AACxCwB,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAEzB,IAAI,CAAC0B;AADR;AADgC,GAApC,EAKLrB,IALK,CAKAP,QAAQ,CAAC;AAACiB,IAAAA,IAAI,EAAEpB,WAAW,CAACgC,YAAnB;AAAiCT,IAAAA,OAAO,EAAEE;AAA1C,GAAD,CALR,CAAN;AAMD,CATM;AAWP,OAAO,MAAMb,YAAY,GAAIqB,KAAD,IAAW;AACrChC,EAAAA,OAAO,CAACiC,WAAR;AACA,SAAO;AACLd,IAAAA,IAAI,EAAEpB,WAAW,CAACmC,aADb;AAC4BZ,IAAAA,OAAO,EAAEU;AADrC,GAAP;AAGD,CALM;AAOP,OAAO,MAAMd,iBAAiB,GAAIR,IAAD,IAAU;AACzC,SAAO;AACLS,IAAAA,IAAI,EAAEpB,WAAW,CAACoC,mBADb;AACkCb,IAAAA,OAAO,EAAEZ,IAAI,CAACE;AADhD,GAAP;AAGD,CAJM","sourcesContent":["import api from \"../apis/api\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as actions from \"../actions/index\";\n\n\nexport const initOrder = () => async (dispatch, getState) => {\n  let user = getState().auth.userId \n  dispatch(startOrder())\n  await api.post(`/users/${user}/orders/`)\n  .then(resp => dispatch(orderSuccess(resp.data)))\n  .catch(error => {\n    dispatch(orderFailed(error))\n  })\n}\n\nexport const fetchOrders = () => async (dispatch, getState) => {\n  let user = getState().auth.userId;\n  dispatch(startOrder())\n  await api.get(`/users/${user}/orders/`)\n  .then(resp => dispatch(fetchOrderSuccess(resp.data)))\n  .catch(error => {\n    dispatch(orderFailed(error))\n  });\n}\n\nexport const startOrder = () => {\n  return {\n    type: actionTypes.START_ORDER\n  }\n}\n\nexport const orderFailed = (error) => {\n  return {\n    type: actionTypes.ORDER_FAILED, payload: error\n  }\n}\n\nexport const deleteOrder = (order_id) => async (dispatch, getState) => {\n  let user = getState().auth.userId \n  console.log(user, order_id)\n  await api.delete(`users/${user}/orders/`, {\n    params: {\n      user_id: user.value\n    }\n  })\n  .then(dispatch({type: actionTypes.DELETE_ORDER, payload: order_id}))\n}\n\nexport const orderSuccess = (order) => {\n  actions.refreshCart()\n  return {\n    type: actionTypes.ORDER_SUCCESS, payload: order\n  }\n}\n\nexport const fetchOrderSuccess = (resp) => {\n  return {\n    type: actionTypes.FETCH_ORDER_SUCCESS, payload: resp.data\n  }\n}"]},"metadata":{},"sourceType":"module"}