{"ast":null,"code":"import api from '../apis/api';\nimport _ from 'lodash';\nimport * as actionTypes from \"./actionTypes\";\nexport const fetchProdByBrand = brand_id => async dispatch => {\n  const response = await api.get(`/brands/${brand_id}/products`);\n  dispatch({\n    type: actionTypes.FETCH_PRODUCTS_BY_BRAND,\n    payload: response.data\n  });\n};\nexport const fetchProdByCategory = category => async dispatch => {\n  const response = await api.get(`/products/`, {\n    params: {\n      category: category\n    }\n  });\n  dispatch({\n    type: actionTypes.FETCH_PRODUCTS_BY_CATEGORY,\n    payload: response.data\n  });\n};\nexport const fetchProdBySize = size => async dispatch => {\n  const response = await api.get(`/products/`, {\n    params: {\n      size: size\n    }\n  });\n  dispatch({\n    type: actionTypes.FETCH_PRODUCTS_BY_SIZE,\n    payload: response.data\n  });\n};\nexport const fetchAllProd = () => async dispatch => {\n  const response = await api.get(`/products/`);\n  dispatch({\n    type: actionTypes.FETCH_ALL_PRODUCTS,\n    payload: response.data\n  });\n};\nexport const fetchProdById = prod_id => async dispatch => {\n  const response = [];\n  await api.get(`products/${prod_id}`).then(resp => {\n    for (let key in resp.data) {\n      response[key] = resp.data[key];\n    }\n\n    console.log(response);\n  });\n  dispatch({\n    type: actionTypes.FETCH_PROD_BY_ID,\n    payload: response\n  });\n};\nexport const fetchFaveProduct = prod_id => async dispatch => {\n  const response = await api.get(`products/${prod_id}`);\n  dispatch({\n    type: actionTypes.FETCH_FAVE_PROD,\n    payload: response.data\n  });\n};\nexport const fetchBrand = brand_id => async dispatch => {\n  const response = await api.get(`/brands/${brand_id}`);\n  dispatch({\n    type: actionTypes.FETCH_BRAND,\n    payload: response.data\n  });\n}; // export const fetchProdAndBrands = () => async (dispatch, getState) => {\n//   await dispatch(fetchAllProd());\n//   _.chain(getState().products)\n//     .map(\"brand_id\")\n//     .uniq()\n//     .forEach((id) => dispatch(fetchBrand(id)))\n//     .value();\n// };","map":{"version":3,"sources":["/Users/mayablevins/Desktop/verses/verses_fe/src/store/actions/ProductsActions.js"],"names":["api","_","actionTypes","fetchProdByBrand","brand_id","dispatch","response","get","type","FETCH_PRODUCTS_BY_BRAND","payload","data","fetchProdByCategory","category","params","FETCH_PRODUCTS_BY_CATEGORY","fetchProdBySize","size","FETCH_PRODUCTS_BY_SIZE","fetchAllProd","FETCH_ALL_PRODUCTS","fetchProdById","prod_id","then","resp","key","console","log","FETCH_PROD_BY_ID","fetchFaveProduct","FETCH_FAVE_PROD","fetchBrand","FETCH_BRAND"],"mappings":"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","sourcesContent":["import api from '../apis/api'\nimport _ from 'lodash'\nimport * as actionTypes from \"./actionTypes\";\n\n export const fetchProdByBrand = (brand_id) => async dispatch => {\n    const response = await api.get(`/brands/${brand_id}/products`)\n    dispatch({type: actionTypes.FETCH_PRODUCTS_BY_BRAND, payload: response.data})\n }\n\n export const fetchProdByCategory = (category) => async (dispatch) => {\n   const response = await api.get(`/products/`, {\n     params: {\n       category: category,\n     },\n   });\n   dispatch({ type: actionTypes.FETCH_PRODUCTS_BY_CATEGORY, payload: response.data });\n };\n\n export const fetchProdBySize = (size) => async (dispatch) => {\n   const response = await api.get(`/products/`, {\n     params: {\n       size: size,\n     },\n   });\n   dispatch({ type: actionTypes.FETCH_PRODUCTS_BY_SIZE, payload: response.data });\n };\n\n export const fetchAllProd = () => async dispatch => {\n    const response = await api.get(`/products/`)\n    dispatch({type: actionTypes.FETCH_ALL_PRODUCTS, payload: response.data})\n }\n\n  export const fetchProdById = (prod_id) => async dispatch => {\n     const response = []\n     await api.get(`products/${prod_id}`)\n     .then(resp => {\n       for(let key in resp.data) {\n        response[key] = resp.data[key]\n       }\n       console.log(response)\n     })\n      dispatch({ type: actionTypes.FETCH_PROD_BY_ID, payload: response });\n  }\n\n    export const fetchFaveProduct = (prod_id) => async (dispatch) => {\n      const response = await api.get(`products/${prod_id}`);\n      dispatch({ type: actionTypes.FETCH_FAVE_PROD, payload: response.data });\n    };\n\nexport const fetchBrand = (brand_id) => async (dispatch) => {\n  const response = await api.get(`/brands/${brand_id}`);\n  dispatch({ type: actionTypes.FETCH_BRAND, payload: response.data });\n};\n\n// export const fetchProdAndBrands = () => async (dispatch, getState) => {\n//   await dispatch(fetchAllProd());\n\n//   _.chain(getState().products)\n//     .map(\"brand_id\")\n//     .uniq()\n//     .forEach((id) => dispatch(fetchBrand(id)))\n//     .value();\n// };"]},"metadata":{},"sourceType":"module"}